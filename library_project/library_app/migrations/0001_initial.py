# Generated by Django 4.2.24 on 2025-09-26 12:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100, verbose_name='фамилия')),
                ('first_name', models.CharField(max_length=100, verbose_name='имя')),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='отчество')),
            ],
            options={
                'verbose_name': 'автор',
                'verbose_name_plural': 'авторы',
                'ordering': ['last_name', 'first_name'],
                'unique_together': {('last_name', 'first_name', 'middle_name')},
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300, verbose_name='название')),
                ('publication_year', models.PositiveIntegerField(blank=True, help_text='Год издания книги', null=True, verbose_name='год издания')),
                ('page_count', models.PositiveIntegerField(default=1, help_text='Общее количество страниц в книге', verbose_name='количество страниц')),
                ('illustration_count', models.PositiveIntegerField(default=0, help_text='Количество иллюстраций в книге', verbose_name='количество иллюстраций')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, help_text='Стоимость книги в рублях', max_digits=10, verbose_name='стоимость')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='дата обновления')),
                ('authors', models.ManyToManyField(related_name='books', to='library_app.author', verbose_name='авторы')),
            ],
            options={
                'verbose_name': 'книга',
                'verbose_name_plural': 'книги',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='название')),
                ('address', models.TextField(blank=True, null=True, verbose_name='адрес')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
            ],
            options={
                'verbose_name': 'филиал',
                'verbose_name_plural': 'филиалы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
            ],
            options={
                'verbose_name': 'факультет',
                'verbose_name_plural': 'факультеты',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='название')),
                ('address', models.TextField(blank=True, null=True, verbose_name='адрес')),
            ],
            options={
                'verbose_name': 'издательство',
                'verbose_name_plural': 'издательства',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=100, verbose_name='фамилия')),
                ('first_name', models.CharField(max_length=100, verbose_name='имя')),
                ('student_id', models.CharField(max_length=20, unique=True, verbose_name='номер студенческого билета')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='library_app.faculty', verbose_name='факультет')),
            ],
            options={
                'verbose_name': 'студент',
                'verbose_name_plural': 'студенты',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_date', models.DateTimeField(auto_now_add=True, verbose_name='дата выдачи')),
                ('return_date', models.DateTimeField(blank=True, null=True, verbose_name='дата возврата')),
                ('is_returned', models.BooleanField(default=False, verbose_name='возвращена')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to='library_app.book', verbose_name='книга')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to='library_app.branch', verbose_name='филиал')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_loans', to=settings.AUTH_USER_MODEL, verbose_name='создано пользователем')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loans', to='library_app.student', verbose_name='студент')),
            ],
            options={
                'verbose_name': 'выдача',
                'verbose_name_plural': 'выдачи',
                'ordering': ['-issue_date'],
            },
        ),
        migrations.CreateModel(
            name='BookInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_copies', models.PositiveIntegerField(default=0, verbose_name='общее количество экземпляров')),
                ('available_copies', models.PositiveIntegerField(default=0, verbose_name='доступное количество экземпляров')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='последнее обновление')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='library_app.book', verbose_name='книга')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='library_app.branch', verbose_name='филиал')),
            ],
            options={
                'verbose_name': 'инвентаризация',
                'verbose_name_plural': 'инвентаризация',
                'ordering': ['branch', 'book'],
            },
        ),
        migrations.CreateModel(
            name='BookFacultyUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='дата создания')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculty_usage', to='library_app.book', verbose_name='книга')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='faculty_usage', to='library_app.branch', verbose_name='филиал')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_usage', to='library_app.faculty', verbose_name='факультет')),
            ],
            options={
                'verbose_name': 'использование книги факультетом',
                'verbose_name_plural': 'использование книг факультетами',
                'ordering': ['faculty', 'book'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='library_app.publisher', verbose_name='издательство'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='library_app_student_447a47_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['last_name', 'first_name'], name='library_app_last_na_e17743_idx'),
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['issue_date'], name='library_app_issue_d_ab8064_idx'),
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['is_returned'], name='library_app_is_retu_f295fe_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bookinventory',
            unique_together={('book', 'branch')},
        ),
        migrations.AlterUniqueTogether(
            name='bookfacultyusage',
            unique_together={('book', 'branch', 'faculty')},
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='library_app_title_ec677d_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['publication_year'], name='library_app_publica_a46121_idx'),
        ),
    ]
